"""
–ó–∞–≤–¥–∞–Ω–Ω—è 3: –ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è —Å—É–º–∏ –≤—Å—ñ—Ö –∑–Ω–∞—á–µ–Ω—å —É –¥–≤—ñ–π–∫–æ–≤–æ–º—É –¥–µ—Ä–µ–≤—ñ –ø–æ—à—É–∫—É –∞–±–æ AVL-–¥–µ—Ä–µ–≤—ñ

–†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤–∫–ª—é—á–∞—î:
- –ö–ª–∞—Å Node –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –≤—É–∑–ª–∞ –¥–µ—Ä–µ–≤–∞
- –ö–ª–∞—Å BinarySearchTree –¥–ª—è –¥–≤—ñ–π–∫–æ–≤–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –ø–æ—à—É–∫—É
- –§—É–Ω–∫—Ü—ñ—é sum_values –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è —Å—É–º–∏ –≤—Å—ñ—Ö –∑–Ω–∞—á–µ–Ω—å
- –†—ñ–∑–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –æ–±—Ö–æ–¥—É –¥–µ—Ä–µ–≤–∞ –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —Å—É–º–∏
"""

class Node:
    """–ö–ª–∞—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –≤—É–∑–ª–∞ –¥–µ—Ä–µ–≤–∞"""
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None

class BinarySearchTree:
    """–ö–ª–∞—Å –¥–ª—è –¥–≤—ñ–π–∫–æ–≤–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –ø–æ—à—É–∫—É"""
    def __init__(self):
        self.root = None
    
    def insert(self, key):
        """–í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –¥–µ—Ä–µ–≤–æ"""
        if self.root is None:
            self.root = Node(key)
        else:
            self._insert_recursive(self.root, key)
    
    def _insert_recursive(self, node, key):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–∞ –≤—Å—Ç–∞–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–Ω—è"""
        if key < node.key:
            if node.left is None:
                node.left = Node(key)
            else:
                self._insert_recursive(node.left, key)
        elif key > node.key:
            if node.right is None:
                node.right = Node(key)
            else:
                self._insert_recursive(node.right, key)
        # –Ø–∫—â–æ key == node.key, –Ω–µ –≤—Å—Ç–∞–≤–ª—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç
    
    def sum_values(self):
        """
        –ó–Ω–∞—Ö–æ–¥–∏—Ç—å —Å—É–º—É –≤—Å—ñ—Ö –∑–Ω–∞—á–µ–Ω—å –≤ –¥–µ—Ä–µ–≤—ñ.
        
        Returns:
            int/float: –°—É–º–∞ –≤—Å—ñ—Ö –∑–Ω–∞—á–µ–Ω—å –≤ –¥–µ—Ä–µ–≤—ñ –∞–±–æ 0, —è–∫—â–æ –¥–µ—Ä–µ–≤–æ –ø–æ—Ä–æ–∂–Ω—î
        """
        return self._sum_recursive(self.root)
    
    def _sum_recursive(self, node):
        """
        –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —Å—É–º–∏ –≤—Å—ñ—Ö –∑–Ω–∞—á–µ–Ω—å.
        
        Args:
            node (Node): –ü–æ—Ç–æ—á–Ω–∏–π –≤—É–∑–æ–ª
            
        Returns:
            int/float: –°—É–º–∞ –∑–Ω–∞—á–µ–Ω—å —É –ø—ñ–¥–¥–µ—Ä–µ–≤—ñ –∑ –∫–æ—Ä–µ–Ω–µ–º —É node
        """
        if node is None:
            return 0
        
        # –°—É–º–∞ = –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≤—É–∑–ª–∞ + —Å—É–º–∞ –ª—ñ–≤–æ–≥–æ –ø—ñ–¥–¥–µ—Ä–µ–≤–∞ + —Å—É–º–∞ –ø—Ä–∞–≤–æ–≥–æ –ø—ñ–¥–¥–µ—Ä–µ–≤–∞
        return node.key + self._sum_recursive(node.left) + self._sum_recursive(node.right)
    
    def count_nodes(self):
        """–ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—É–∑–ª—ñ–≤ —É –¥–µ—Ä–µ–≤—ñ"""
        return self._count_nodes_recursive(self.root)
    
    def _count_nodes_recursive(self, node):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É –≤—É–∑–ª—ñ–≤"""
        if node is None:
            return 0
        return 1 + self._count_nodes_recursive(node.left) + self._count_nodes_recursive(node.right)
    
    def average_value(self):
        """–û–±—á–∏—Å–ª—é—î —Å–µ—Ä–µ–¥–Ω—î –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≤—Å—ñ—Ö –≤—É–∑–ª—ñ–≤"""
        total_sum = self.sum_values()
        node_count = self.count_nodes()
        
        if node_count == 0:
            return 0
        
        return total_sum / node_count
    
    def display_inorder(self):
        """–í–∏–≤–æ–¥–∏—Ç—å –¥–µ—Ä–µ–≤–æ –≤ –ø–æ—Ä—è–¥–∫—É –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è (in-order traversal)"""
        result = []
        self._inorder_recursive(self.root, result)
        return result
    
    def _inorder_recursive(self, node, result):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–∏–π –æ–±—Ö—ñ–¥ –¥–µ—Ä–µ–≤–∞ –≤ –ø–æ—Ä—è–¥–∫—É –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è"""
        if node is not None:
            self._inorder_recursive(node.left, result)
            result.append(node.key)
            self._inorder_recursive(node.right, result)

def sum_tree_iterative(root):
    """
    –Ü—Ç–µ—Ä–∞—Ç–∏–≤–Ω–∞ –≤–µ—Ä—Å—ñ—è –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É —Å—É–º–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å—Ç–µ–∫–∞.
    
    Args:
        root (Node): –ö–æ—Ä—ñ–Ω—å –¥–µ—Ä–µ–≤–∞
        
    Returns:
        int/float: –°—É–º–∞ –≤—Å—ñ—Ö –∑–Ω–∞—á–µ–Ω—å –≤ –¥–µ—Ä–µ–≤—ñ
    """
    if root is None:
        return 0
    
    stack = [root]
    total_sum = 0
    
    while stack:
        current = stack.pop()
        total_sum += current.key
        
        # –î–æ–¥–∞—î–º–æ –¥—ñ—Ç–µ–π –¥–æ —Å—Ç–µ–∫–∞
        if current.right:
            stack.append(current.right)
        if current.left:
            stack.append(current.left)
    
    return total_sum

def sum_tree_level_order(root):
    """
    –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Å—É–º–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –æ–±—Ö–æ–¥—É –≤ —à–∏—Ä–∏–Ω—É (level-order).
    
    Args:
        root (Node): –ö–æ—Ä—ñ–Ω—å –¥–µ—Ä–µ–≤–∞
        
    Returns:
        int/float: –°—É–º–∞ –≤—Å—ñ—Ö –∑–Ω–∞—á–µ–Ω—å –≤ –¥–µ—Ä–µ–≤—ñ
    """
    if root is None:
        return 0
    
    from collections import deque
    queue = deque([root])
    total_sum = 0
    
    while queue:
        current = queue.popleft()
        total_sum += current.key
        
        # –î–æ–¥–∞—î–º–æ –¥—ñ—Ç–µ–π –¥–æ —á–µ—Ä–≥–∏
        if current.left:
            queue.append(current.left)
        if current.right:
            queue.append(current.right)
    
    return total_sum

def tree_statistics(root):
    """
    –û–±—á–∏—Å–ª—é—î —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–µ—Ä–µ–≤–∞.
    
    Args:
        root (Node): –ö–æ—Ä—ñ–Ω—å –¥–µ—Ä–µ–≤–∞
        
    Returns:
        dict: –°–ª–æ–≤–Ω–∏–∫ –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞–º–∏
    """
    if root is None:
        return {
            'sum': 0,
            'count': 0,
            'average': 0,
            'min': None,
            'max': None
        }
    
    # –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
    values = []
    stack = [root]
    
    while stack:
        current = stack.pop()
        values.append(current.key)
        
        if current.right:
            stack.append(current.right)
        if current.left:
            stack.append(current.left)
    
    return {
        'sum': sum(values),
        'count': len(values),
        'average': sum(values) / len(values),
        'min': min(values),
        'max': max(values)
    }

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏
def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º—É –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É —Å—É–º–∏ –≤—Å—ñ—Ö –∑–Ω–∞—á–µ–Ω—å"""
    print("üå≥ –ó–∞–≤–¥–∞–Ω–Ω—è 3: –°—É–º–∞ –≤—Å—ñ—Ö –∑–Ω–∞—á–µ–Ω—å —É –¥–≤—ñ–π–∫–æ–≤–æ–º—É –¥–µ—Ä–µ–≤—ñ –ø–æ—à—É–∫—É")
    print("=" * 70)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–µ—Ä–µ–≤–æ
    bst = BinarySearchTree()
    
    # –î–æ–¥–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è
    values = [15, 10, 20, 8, 12, 17, 25, 6, 11, 13, 22, 27]
    print(f"–î–æ–¥–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è: {values}")
    print(f"–û—á—ñ–∫—É–≤–∞–Ω–∞ —Å—É–º–∞ (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞): {sum(values)}")
    
    for value in values:
        bst.insert(value)
    
    # –í–∏–≤–æ–¥–∏–º–æ –¥–µ—Ä–µ–≤–æ
    sorted_values = bst.display_inorder()
    print(f"–î–µ—Ä–µ–≤–æ (–≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è): {sorted_values}")
    
    # –û–±—á–∏—Å–ª—é—î–º–æ —Å—É–º—É —Ä—ñ–∑–Ω–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
    print(f"\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —Å—É–º–∏:")
    
    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥ –∫–ª–∞—Å—É
    sum_recursive = bst.sum_values()
    print(f"   –†–µ–∫—É—Ä—Å–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥: {sum_recursive}")
    
    # –Ü—Ç–µ—Ä–∞—Ç–∏–≤–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥
    sum_iterative = sum_tree_iterative(bst.root)
    print(f"   –Ü—Ç–µ—Ä–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥: {sum_iterative}")
    
    # –û–±—Ö—ñ–¥ —É —à–∏—Ä–∏–Ω—É
    sum_level_order = sum_tree_level_order(bst.root)
    print(f"   –û–±—Ö—ñ–¥ —É —à–∏—Ä–∏–Ω—É: {sum_level_order}")
    
    # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    node_count = bst.count_nodes()
    average = bst.average_value()
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ—Ä–µ–≤–∞:")
    print(f"   –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤—É–∑–ª—ñ–≤: {node_count}")
    print(f"   –°—É–º–∞ –≤—Å—ñ—Ö –∑–Ω–∞—á–µ–Ω—å: {sum_recursive}")
    print(f"   –°–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è: {average:.2f}")
    
    # –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = tree_statistics(bst.root)
    print(f"\nüìà –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    for key, value in stats.items():
        if isinstance(value, float):
            print(f"   {key.capitalize()}: {value:.2f}")
        else:
            print(f"   {key.capitalize()}: {value}")
    
    # –¢–µ—Å—Ç–∏ –Ω–∞ –æ—Å–æ–±–ª–∏–≤–∏—Ö –≤–∏–ø–∞–¥–∫–∞—Ö
    print(f"\nüß™ –¢–µ—Å—Ç–∏ –Ω–∞ –æ—Å–æ–±–ª–∏–≤–∏—Ö –≤–∏–ø–∞–¥–∫–∞—Ö:")
    
    # –ü–æ—Ä–æ–∂–Ω—î –¥–µ—Ä–µ–≤–æ
    empty_bst = BinarySearchTree()
    print(f"   –ü–æ—Ä–æ–∂–Ω—î –¥–µ—Ä–µ–≤–æ: {empty_bst.sum_values()}")
    
    # –î–µ—Ä–µ–≤–æ –∑ –æ–¥–Ω–∏–º –µ–ª–µ–º–µ–Ω—Ç–æ–º
    single_bst = BinarySearchTree()
    single_bst.insert(42)
    print(f"   –î–µ—Ä–µ–≤–æ –∑ –æ–¥–Ω–∏–º –µ–ª–µ–º–µ–Ω—Ç–æ–º (42): {single_bst.sum_values()}")
    
    # –î–µ—Ä–µ–≤–æ –∑ –≤—ñ–¥'—î–º–Ω–∏–º–∏ —á–∏—Å–ª–∞–º–∏
    negative_bst = BinarySearchTree()
    negative_values = [-10, -5, -15, -3, -7]
    for val in negative_values:
        negative_bst.insert(val)
    expected_negative_sum = sum(negative_values)
    actual_negative_sum = negative_bst.sum_values()
    print(f"   –í—ñ–¥'—î–º–Ω—ñ —á–∏—Å–ª–∞ {negative_values}: {actual_negative_sum} (–æ—á—ñ–∫—É–≤–∞–Ω–æ: {expected_negative_sum})")
    
    # –î–µ—Ä–µ–≤–æ –∑ –¥—Ä–æ–±–æ–≤–∏–º–∏ —á–∏—Å–ª–∞–º–∏
    float_bst = BinarySearchTree()
    float_values = [3.14, 2.71, 1.41, 4.5, 0.5]
    for val in float_values:
        float_bst.insert(val)
    expected_float_sum = sum(float_values)
    actual_float_sum = float_bst.sum_values()
    print(f"   –î—Ä–æ–±–æ–≤—ñ —á–∏—Å–ª–∞ {float_values}: {actual_float_sum:.2f} (–æ—á—ñ–∫—É–≤–∞–Ω–æ: {expected_float_sum:.2f})")
    
    # –î–µ—Ä–µ–≤–æ –∑ –Ω—É–ª—è–º–∏
    zero_bst = BinarySearchTree()
    zero_values = [0, 5, -5, 3, -3]
    for val in zero_values:
        zero_bst.insert(val)
    expected_zero_sum = sum(zero_values)
    actual_zero_sum = zero_bst.sum_values()
    print(f"   –ß–∏—Å–ª–∞ –∑ –Ω—É–ª–µ–º {zero_values}: {actual_zero_sum} (–æ—á—ñ–∫—É–≤–∞–Ω–æ: {expected_zero_sum})")
    
    print(f"\n‚úÖ –û—Å–Ω–æ–≤–Ω–∞ —Å—É–º–∞ –≤—Å—ñ—Ö –∑–Ω–∞—á–µ–Ω—å —É –¥–µ—Ä–µ–≤—ñ: {sum_recursive}")

if __name__ == "__main__":
    main()
