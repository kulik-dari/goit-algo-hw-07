"""
–ó–∞–≤–¥–∞–Ω–Ω—è 1: –ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –Ω–∞–π–±—ñ–ª—å—à–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è —É –¥–≤—ñ–π–∫–æ–≤–æ–º—É –¥–µ—Ä–µ–≤—ñ –ø–æ—à—É–∫—É –∞–±–æ AVL-–¥–µ—Ä–µ–≤—ñ

–†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤–∫–ª—é—á–∞—î:
- –ö–ª–∞—Å Node –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –≤—É–∑–ª–∞ –¥–µ—Ä–µ–≤–∞
- –ö–ª–∞—Å BinarySearchTree –¥–ª—è –¥–≤—ñ–π–∫–æ–≤–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –ø–æ—à—É–∫—É
- –§—É–Ω–∫—Ü—ñ—é find_max –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –Ω–∞–π–±—ñ–ª—å—à–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è
"""

class Node:
    """–ö–ª–∞—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –≤—É–∑–ª–∞ –¥–µ—Ä–µ–≤–∞"""
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None

class BinarySearchTree:
    """–ö–ª–∞—Å –¥–ª—è –¥–≤—ñ–π–∫–æ–≤–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –ø–æ—à—É–∫—É"""
    def __init__(self):
        self.root = None
    
    def insert(self, key):
        """–í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –¥–µ—Ä–µ–≤–æ"""
        if self.root is None:
            self.root = Node(key)
        else:
            self._insert_recursive(self.root, key)
    
    def _insert_recursive(self, node, key):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–∞ –≤—Å—Ç–∞–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–Ω—è"""
        if key < node.key:
            if node.left is None:
                node.left = Node(key)
            else:
                self._insert_recursive(node.left, key)
        elif key > node.key:
            if node.right is None:
                node.right = Node(key)
            else:
                self._insert_recursive(node.right, key)
        # –Ø–∫—â–æ key == node.key, –Ω–µ –≤—Å—Ç–∞–≤–ª—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç
    
    def find_max(self):
        """
        –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–π–±—ñ–ª—å—à–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –¥–µ—Ä–µ–≤—ñ.
        
        –£ –¥–≤—ñ–π–∫–æ–≤–æ–º—É –¥–µ—Ä–µ–≤—ñ –ø–æ—à—É–∫—É –Ω–∞–π–±—ñ–ª—å—à–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞–≤–∂–¥–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è
        –≤ –Ω–∞–π–ø—Ä–∞–≤—ñ—à–æ–º—É –≤—É–∑–ª—ñ –¥–µ—Ä–µ–≤–∞.
        
        Returns:
            int/float: –ù–∞–π–±—ñ–ª—å—à–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –¥–µ—Ä–µ–≤—ñ –∞–±–æ None, —è–∫—â–æ –¥–µ—Ä–µ–≤–æ –ø–æ—Ä–æ–∂–Ω—î
        """
        if self.root is None:
            return None
        
        current = self.root
        # –ô–¥–µ–º–æ –≤–ø—Ä–∞–≤–æ –¥–æ —Ç–∏—Ö –ø—ñ—Ä, –ø–æ–∫–∏ –Ω–µ –¥–æ—Å—è–≥–Ω–µ–º–æ –Ω–∞–π–ø—Ä–∞–≤—ñ—à–æ–≥–æ –≤—É–∑–ª–∞
        while current.right is not None:
            current = current.right
        
        return current.key
    
    def display_inorder(self):
        """–í–∏–≤–æ–¥–∏—Ç—å –¥–µ—Ä–µ–≤–æ –≤ –ø–æ—Ä—è–¥–∫—É –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è (in-order traversal)"""
        result = []
        self._inorder_recursive(self.root, result)
        return result
    
    def _inorder_recursive(self, node, result):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–∏–π –æ–±—Ö—ñ–¥ –¥–µ—Ä–µ–≤–∞ –≤ –ø–æ—Ä—è–¥–∫—É –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è"""
        if node is not None:
            self._inorder_recursive(node.left, result)
            result.append(node.key)
            self._inorder_recursive(node.right, result)

def find_max_in_bst(root):
    """
    –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –Ω–∞–π–±—ñ–ª—å—à–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è.
    –ü—Ä–∏–π–º–∞—î –∫–æ—Ä—ñ–Ω—å –¥–µ—Ä–µ–≤–∞ —è–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä.
    
    Args:
        root (Node): –ö–æ—Ä—ñ–Ω—å –¥–µ—Ä–µ–≤–∞
        
    Returns:
        int/float: –ù–∞–π–±—ñ–ª—å—à–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –¥–µ—Ä–µ–≤—ñ –∞–±–æ None, —è–∫—â–æ –¥–µ—Ä–µ–≤–æ –ø–æ—Ä–æ–∂–Ω—î
    """
    if root is None:
        return None
    
    current = root
    while current.right is not None:
        current = current.right
    
    return current.key

def find_max_recursive(root):
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞ –≤–µ—Ä—Å—ñ—è –ø–æ—à—É–∫—É –Ω–∞–π–±—ñ–ª—å—à–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è.
    
    Args:
        root (Node): –ö–æ—Ä—ñ–Ω—å –¥–µ—Ä–µ–≤–∞
        
    Returns:
        int/float: –ù–∞–π–±—ñ–ª—å—à–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –¥–µ—Ä–µ–≤—ñ –∞–±–æ None, —è–∫—â–æ –¥–µ—Ä–µ–≤–æ –ø–æ—Ä–æ–∂–Ω—î
    """
    if root is None:
        return None
    
    # –Ø–∫—â–æ –Ω–µ–º–∞—î –ø—Ä–∞–≤–æ—ó –¥–∏—Ç–∏–Ω–∏, –ø–æ—Ç–æ—á–Ω–∏–π –≤—É–∑–æ–ª –º–∞—î –º–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
    if root.right is None:
        return root.key
    
    # –Ü–Ω–∞–∫—à–µ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ —à—É–∫–∞—î–º–æ –≤ –ø—Ä–∞–≤–æ–º—É –ø—ñ–¥–¥–µ—Ä–µ–≤—ñ
    return find_max_recursive(root.right)

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏
def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º—É –ø–æ—à—É–∫—É –Ω–∞–π–±—ñ–ª—å—à–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è"""
    print("üå≥ –ó–∞–≤–¥–∞–Ω–Ω—è 1: –ü–æ—à—É–∫ –Ω–∞–π–±—ñ–ª—å—à–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –¥–≤—ñ–π–∫–æ–≤–æ–º—É –¥–µ—Ä–µ–≤—ñ –ø–æ—à—É–∫—É")
    print("=" * 70)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–µ—Ä–µ–≤–æ
    bst = BinarySearchTree()
    
    # –î–æ–¥–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è
    values = [15, 10, 20, 8, 12, 17, 25, 6, 11, 13, 22, 27]
    print(f"–î–æ–¥–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è: {values}")
    
    for value in values:
        bst.insert(value)
    
    # –í–∏–≤–æ–¥–∏–º–æ –¥–µ—Ä–µ–≤–æ
    sorted_values = bst.display_inorder()
    print(f"–î–µ—Ä–µ–≤–æ (–≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è): {sorted_values}")
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞–π–±—ñ–ª—å—à–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Ä—ñ–∑–Ω–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
    print(f"\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –Ω–∞–π–±—ñ–ª—å—à–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è:")
    
    # –ú–µ—Ç–æ–¥ –∫–ª–∞—Å—É
    max_value_1 = bst.find_max()
    print(f"   –ú–µ—Ç–æ–¥ –∫–ª–∞—Å—É: {max_value_1}")
    
    # –§—É–Ω–∫—Ü—ñ—è –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º root
    max_value_2 = find_max_in_bst(bst.root)
    print(f"   –§—É–Ω–∫—Ü—ñ—è –∑ root: {max_value_2}")
    
    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
    max_value_3 = find_max_recursive(bst.root)
    print(f"   –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è: {max_value_3}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ—Ä–æ–∂–Ω—å–æ–º—É –¥–µ—Ä–µ–≤—ñ
    empty_bst = BinarySearchTree()
    max_empty = empty_bst.find_max()
    print(f"   –ü–æ—Ä–æ–∂–Ω—î –¥–µ—Ä–µ–≤–æ: {max_empty}")
    
    print(f"\n‚úÖ –ù–∞–π–±—ñ–ª—å—à–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –¥–µ—Ä–µ–≤—ñ: {max_value_1}")
    
    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ç–µ—Å—Ç–∏
    print(f"\nüß™ –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ç–µ—Å—Ç–∏:")
    
    # –¢–µ—Å—Ç –∑ –æ–¥–Ω–∏–º –µ–ª–µ–º–µ–Ω—Ç–æ–º
    single_bst = BinarySearchTree()
    single_bst.insert(42)
    print(f"   –î–µ—Ä–µ–≤–æ –∑ –æ–¥–Ω–∏–º –µ–ª–µ–º–µ–Ω—Ç–æ–º (42): {single_bst.find_max()}")
    
    # –¢–µ—Å—Ç –∑ –≤—ñ–¥'—î–º–Ω–∏–º–∏ —á–∏—Å–ª–∞–º–∏
    negative_bst = BinarySearchTree()
    negative_values = [-10, -5, -15, -3, -7, -12, -20]
    for val in negative_values:
        negative_bst.insert(val)
    print(f"   –î–µ—Ä–µ–≤–æ –∑ –≤—ñ–¥'—î–º–Ω–∏–º–∏ —á–∏—Å–ª–∞–º–∏ {negative_values}: {negative_bst.find_max()}")
    
    # –¢–µ—Å—Ç –∑ –¥—Ä–æ–±–æ–≤–∏–º–∏ —á–∏—Å–ª–∞–º–∏
    float_bst = BinarySearchTree()
    float_values = [3.14, 2.71, 1.41, 4.5, 0.5]
    for val in float_values:
        float_bst.insert(val)
    print(f"   –î–µ—Ä–µ–≤–æ –∑ –¥—Ä–æ–±–æ–≤–∏–º–∏ —á–∏—Å–ª–∞–º–∏ {float_values}: {float_bst.find_max()}")

if __name__ == "__main__":
    main()
